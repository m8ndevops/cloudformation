# Create a security group for prod env with
# prod related condition added. Use Intrinsic
# function Fn::if

AWSTemplateFormatVersion: 2010-09-09
Description: Basic EC2 Instance

Parameters:
  MyKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description:  Select the KeyPair Name
  MyEnvironment:
    Description: Select the Environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Mappings:
  MyRegionMap:
    us-east-2:
      HVM64: ami-02f706d959cedf892
    us-west-1:
      HVM64: ami-0fcdcdb074d2bac5f
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.micro

Conditions:
  CreateEIPForProd: !Equals [!Ref MyEnvironment, prod]
  CreateDevSecurityGroup: !Equals [!Ref MyEnvironment, dev]
  CreateProdSecurityGroup: !Equals [!Ref MyEnvironment, prod]

Resources:
  MyEnvInstances:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'  # top level key 
        - HVM64               # second level key
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironment
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref DevEnvSecurityGroup], [!Ref ProdEnvSecurityGroup] ] 

  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyEnvInstances

  DevEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: DEV SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  ProdEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateProdSecurityGroup
    Properties:
      GroupDescription: PROD SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0